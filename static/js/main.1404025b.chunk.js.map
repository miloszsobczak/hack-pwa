{"version":3,"sources":["serviceWorker.ts","features/news/news.reducer.ts","features/news/news.provider.ts","features/news/news.action.ts","features/app-menu/app-menu.tsx","features/news/news-list/news-list.tsx","pages/ask/ask.tsx","pages/jobs/jobs.tsx","pages/newest/newest.tsx","pages/news/news.tsx","pages/show/show.tsx","features/app/app.tsx","features/app/app.store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","NEWS","NEWEST","ASK","JOB","SHOW","RESOURCES","buildUrl","resource","page","replace","toLowerCase","String","NewsProvider","fetch","then","result","json","newsFetched","news","type","newestFetched","askFetched","jobsFetched","showFetched","fetchNews","dispatch","a","async","GET_NEWS","fetchNewest","GET_NEWEST","fetchJobs","GET_JOBS","fetchAsk","GET_ASK","fetchShow","GET_SHOW","AppMenu","useDispatch","Menu","text","vertical","fluid","Item","header","name","as","className","to","Button","compact","size","floated","onClick","NewsList","Segment","padded","this","showLoading","Dimmer","active","inverted","Loader","Group","props","map","newsItem","key","id","Content","Header","title","Extra","time_ago","url","length","Component","AskPage","withRouter","connect","state","ask","useEffect","JobsPage","jobs","NewestPage","newest","NewsPage","ShowPage","show","AppContainer","Grid","rows","columns","Row","Column","width","path","exact","reducers","combineReducers","action","appStore","createStore","applyMiddleware","ReduxThunk","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1404025b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { NewsFeedItem } from './news-feed-item';\n\nexport const NEWS = {\n    FETCH_SUCCESS: 'FETCH_NEWS_SUCCESS',\n};\n\nexport const NEWEST = {\n    FETCH_SUCCESS: 'FETCH_NEWEST_SUCCESS',\n};\n\nexport const ASK = {\n    FETCH_SUCCESS: 'FETCH_ASK_SUCCESS',\n};\n\nexport const JOB = {\n    FETCH_SUCCESS: 'FETCH_JOB_SUCCESS',\n};\n\nexport const SHOW = {\n    FETCH_SUCCESS: 'FETCH_SHOW_SUCCESS',\n};\n\nexport const news = (state = [], action: {type: string, news: NewsFeedItem[]}) => {\n    switch (action.type) {\n        case NEWS.FETCH_SUCCESS:\n            return [\n                ...action.news\n            ];\n        default:\n            return state;\n    }\n};\n\nexport const newest = (state = [], action: {type: string, news: NewsFeedItem[]}) => {\n    switch (action.type) {\n        case NEWEST.FETCH_SUCCESS:\n            return [\n                ...action.news\n            ];\n        default:\n            return state;\n    }\n};\n\nexport const ask = (state = [], action: {type: string, news: NewsFeedItem[]}) => {\n    switch (action.type) {\n        case ASK.FETCH_SUCCESS:\n            return [\n                ...action.news\n            ];\n        default:\n            return state;\n    }\n};\n\nexport const jobs = (state = [], action: {type: string, news: NewsFeedItem[]}) => {\n    switch (action.type) {\n        case JOB.FETCH_SUCCESS:\n            return [\n                ...action.news\n            ];\n        default:\n            return state;\n    }\n};\n\nexport const show = (state = [], action: {type: string, news: NewsFeedItem[]}) => {\n    switch (action.type) {\n        case SHOW.FETCH_SUCCESS:\n            return [\n                ...action.news\n            ];\n        default:\n            return state;\n    }\n};\n","import { NewsFeedItem } from './news-feed-item';\n\nconst RESOURCES = {\n  NEWS: 'NEWS',\n  NEWEST: 'NEWEST',\n  ASK: 'ASK',\n  SHOW: 'SHOW',\n  JOBS: 'JOBS',\n};\nconst URL = 'https://api.hnpwa.com/v0/$1/$2.json';\n\nfunction buildUrl(resource: string, page: number): string {\n    return URL.replace('$1', resource.toLowerCase()).replace('$2', String(page));\n}\n\nexport default class NewsProvider {\n    static GET_NEWS(page = 1): Promise<NewsFeedItem[]> {\n        return fetch(buildUrl(RESOURCES.NEWS, page))\n            .then(result => result.json());\n    }\n\n    static GET_NEWEST(page = 1): Promise<NewsFeedItem[]> {\n        return fetch(buildUrl(RESOURCES.NEWEST, page))\n            .then(result => result.json());\n    }\n\n    static GET_ASK(page = 1): Promise<NewsFeedItem[]> {\n        return fetch(buildUrl(RESOURCES.ASK, page))\n            .then(result => result.json());\n    }\n\n    static GET_SHOW(page = 1): Promise<NewsFeedItem[]> {\n        return fetch(buildUrl(RESOURCES.SHOW, page))\n            .then(result => result.json());\n    }\n\n    static GET_JOBS(page = 1): Promise<NewsFeedItem[]> {\n        return fetch(buildUrl(RESOURCES.JOBS, page))\n            .then(result => result.json());\n    }\n};\n","import { NewsFeedItem } from './news-feed-item';\nimport { NEWS, NEWEST, ASK, JOB, SHOW } from './news.reducer';\nimport NewsProvider from './news.provider';\nimport { Dispatch } from 'redux';\n\nexport const newsFetched = (news: NewsFeedItem[]) => ({\n    type: NEWS.FETCH_SUCCESS,\n    news,\n});\n\nexport const newestFetched = (news: NewsFeedItem[]) => ({\n    type: NEWEST.FETCH_SUCCESS,\n    news,\n});\n\nexport const askFetched = (news: NewsFeedItem[]) => ({\n    type: ASK.FETCH_SUCCESS,\n    news,\n});\n\nexport const jobsFetched = (news: NewsFeedItem[]) => ({\n    type: JOB.FETCH_SUCCESS,\n    news,\n});\n\nexport const showFetched = (news: NewsFeedItem[]) => ({\n    type: SHOW.FETCH_SUCCESS,\n    news,\n});\n\nexport const fetchNews = () => async (dispatch: Dispatch) => {\n    const news = await NewsProvider.GET_NEWS(1);\n    dispatch(newsFetched(news));\n};\n\nexport const fetchNewest = () => async (dispatch: Dispatch) => {\n    const news = await NewsProvider.GET_NEWEST(1);\n    dispatch(newestFetched(news));\n};\n\nexport const fetchJobs = () => async (dispatch: Dispatch) => {\n    const news = await NewsProvider.GET_JOBS(1);\n    dispatch(jobsFetched(news));\n};\n\nexport const fetchAsk = () => async (dispatch: Dispatch) => {\n    const news = await NewsProvider.GET_ASK(1);\n    dispatch(askFetched(news));\n};\n\nexport const fetchShow = () => async (dispatch: Dispatch) => {\n    const news = await NewsProvider.GET_SHOW(1);\n    dispatch(showFetched(news));\n};\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Menu, Button } from 'semantic-ui-react';\n\nimport { Link } from 'react-router-dom';\nimport { fetchAsk, fetchJobs, fetchNewest, fetchNews, fetchShow } from '../news/news.action';\n\nconst AppMenu: React.FC = () => {\n    const dispatch = useDispatch();\n\n    return (\n        <Menu text vertical fluid>\n            <Menu.Item header>Hackernews</Menu.Item>\n            <Menu.Item\n                name='News'\n                as={() => {\n                    return (\n                        <div className=\"item\">\n                            <Link to=\"/\">News</Link>\n                            <Button compact size={\"mini\"} floated={\"right\"}\n                                    onClick={() => dispatch(fetchNews())}>refresh</Button>\n                        </div>\n                    );\n                }}\n            />\n            <Menu.Item\n                name='Newest'\n                as={() => {\n                    return (\n                        <div className=\"item\">\n                            <Link to=\"/newest\">Newest</Link>\n                            <Button compact size={\"mini\"} floated={\"right\"}\n                                    onClick={() => dispatch(fetchNewest())}>refresh</Button>\n                        </div>\n                    );\n                }}\n            />\n            <Menu.Item\n                name='Ask'\n                as={() => {\n                    return (\n                        <div className=\"item\">\n                            <Link to=\"/ask\">Ask</Link>\n                            <Button compact size={\"mini\"} floated={\"right\"}\n                                    onClick={() => dispatch(fetchAsk())}>refresh</Button>\n                        </div>\n                    );\n                }}\n            />\n            <Menu.Item\n                name='Show'\n                as={() => {\n                    return (\n                        <div className=\"item\">\n                            <Link to=\"/show\">Show</Link>\n                            <Button compact size={\"mini\"} floated={\"right\"}\n                                    onClick={() => dispatch(fetchShow())}>refresh</Button>\n                        </div>\n                    );\n                }}\n            />\n            <Menu.Item\n                name='Jobs'\n                as={() => {\n                    return (\n                        <div className=\"item\">\n                            <Link to=\"/jobs\">Jobs</Link>\n                            <Button compact size={\"mini\"} floated={\"right\"}\n                                    onClick={() => dispatch(fetchJobs())}>refresh</Button>\n                        </div>\n                    );\n                }}\n            />\n        </Menu>\n    )\n};\n\nexport default AppMenu;","import React, { Component } from 'react';\nimport { Item, Segment, Dimmer, Loader } from 'semantic-ui-react';\nimport { NewsFeedItem } from '../news-feed-item';\n\nexport interface NewsListProps {\n    news?: NewsFeedItem[]\n}\n\nexport default class NewsList extends Component<NewsListProps> {\n    get showLoading (): boolean {\n        return !this.props.news || !this.props.news.length;\n    }\n\n    render() {\n        return (\n            <Segment padded={this.showLoading}>\n                <Dimmer active={this.showLoading} inverted>\n                    <Loader inverted>Loading</Loader>\n                </Dimmer>\n                <Item.Group>\n                    {this.props.news && this.props.news.map((newsItem: NewsFeedItem) => {\n                        return (\n                            <Item key={newsItem.id}>\n                                <Item.Content>\n                                    <Item.Header>{newsItem.title}</Item.Header>\n                                    <Item.Extra as={'strong'}>{newsItem.time_ago}</Item.Extra>\n                                    <Item.Extra as={'a'}>{newsItem.url}</Item.Extra>\n                                </Item.Content>\n                            </Item>\n                        )\n                    })}\n                </Item.Group>\n            </Segment>\n        )\n    }\n}","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\n\nimport NewsList from '../../features/news/news-list/news-list';\nimport { NewsFeedItem } from '../../features/news/news-feed-item';\nimport { fetchAsk } from '../../features/news/news.action';\nimport { AppReduxState } from '../../features/app/app.reducer';\n\n\ninterface AskPageProps {\n    news: NewsFeedItem[],\n    fetchAsk: typeof fetchAsk\n}\n\nexport const AskPageView: React.FC<AskPageProps> = props => {\n    useEffect(() => {\n        if (!props.news.length) {\n            props.fetchAsk();\n        }\n    });\n\n    return (\n        <>\n            <h2>Ask</h2>\n            <NewsList {...props}/>\n        </>\n    );\n};\n\nconst mapStateToProps = (state: AppReduxState) => {\n    return {\n        news: state.ask,\n    };\n};\nconst mapDispatchToProps = (dispatch: any) => {\n    return { fetchAsk: () => dispatch(fetchAsk()) };\n};\n\nexport const AskPage = withRouter(connect(mapStateToProps, mapDispatchToProps)(AskPageView));","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\n\nimport NewsList from '../../features/news/news-list/news-list';\nimport { NewsFeedItem } from '../../features/news/news-feed-item';\nimport { fetchJobs } from '../../features/news/news.action';\nimport { AppReduxState } from '../../features/app/app.reducer';\n\ninterface JobsPageProps {\n    news: NewsFeedItem[],\n    fetchJobs: typeof fetchJobs\n}\n\nexport const JobsPageView: React.FC<JobsPageProps> = props => {\n    useEffect(() => {\n        if (!props.news.length) {\n            props.fetchJobs();\n        }\n    });\n\n    return (\n        <>\n            <h2>Jobs</h2>\n            <NewsList {...props}/>\n        </>\n    );\n};\n\nconst mapStateToProps = (state: AppReduxState) => {\n    return {\n        news: state.jobs,\n    };\n};\nconst mapDispatchToProps = (dispatch: any) => {\n    return { fetchJobs: () => dispatch(fetchJobs()) };\n};\n\nexport const JobsPage = withRouter(connect(mapStateToProps, mapDispatchToProps)(JobsPageView));","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\n\nimport NewsList from '../../features/news/news-list/news-list';\nimport { NewsFeedItem } from '../../features/news/news-feed-item';\nimport { fetchNewest } from '../../features/news/news.action';\nimport { AppReduxState } from '../../features/app/app.reducer';\n\ninterface NewestPageProps {\n    news: NewsFeedItem[],\n    fetchNewest: typeof fetchNewest\n}\n\nexport const NewestPageView: React.FC<NewestPageProps> = props => {\n    useEffect(() => {\n        if (!props.news.length) {\n            props.fetchNewest();\n        }\n    });\n\n    return (\n        <>\n            <h2>Newest</h2>\n            <NewsList {...props}/>\n        </>\n    );\n};\n\nconst mapStateToProps = (state: AppReduxState) => {\n    return {\n        news: state.newest,\n    };\n};\nconst mapDispatchToProps = (dispatch: any) => {\n    return { fetchNewest: () => dispatch(fetchNewest()) };\n};\n\nexport const NewestPage = withRouter(connect(mapStateToProps, mapDispatchToProps)(NewestPageView));\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\n\nimport NewsList from '../../features/news/news-list/news-list';\nimport { NewsFeedItem } from '../../features/news/news-feed-item';\nimport { fetchNews } from '../../features/news/news.action';\nimport { AppReduxState } from '../../features/app/app.reducer';\n\ninterface NewsPageProps {\n    news: NewsFeedItem[],\n    fetchNews: typeof fetchNews\n}\n\nexport const NewsPageView: React.FC<NewsPageProps> = props => {\n    useEffect(() => {\n        if (!props.news.length) {\n            props.fetchNews();\n        }\n    });\n\n    return (\n        <>\n            <h2>News</h2>\n            <NewsList {...props}/>\n        </>\n    );\n};\n\nconst mapStateToProps = (state: AppReduxState) => {\n    return {\n        news: state.news,\n    };\n};\nconst mapDispatchToProps = (dispatch: any) => {\n    return { fetchNews: () => dispatch(fetchNews()) };\n};\n\nexport const NewsPage = withRouter(connect(mapStateToProps, mapDispatchToProps)(NewsPageView));","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\n\nimport NewsList from '../../features/news/news-list/news-list';\nimport { NewsFeedItem } from '../../features/news/news-feed-item';\nimport { fetchShow } from '../../features/news/news.action';\nimport { AppReduxState } from '../../features/app/app.reducer';\n\ninterface ShowPageProps {\n    news: NewsFeedItem[],\n    fetchShow: typeof fetchShow\n}\n\nexport const ShowPageView: React.FC<ShowPageProps> = props => {\n    useEffect(() => {\n        if (!props.news.length) {\n            props.fetchShow();\n        }\n    });\n\n    return (\n        <>\n            <h2>Show</h2>\n            <NewsList {...props}/>\n        </>\n    );\n};\n\nconst mapStateToProps = (state: AppReduxState) => {\n    return {\n        news: state.show,\n    };\n};\nconst mapDispatchToProps = (dispatch: any) => {\n    return { fetchShow: () => dispatch(fetchShow()) };\n};\n\nexport const ShowPage = withRouter(connect(mapStateToProps, mapDispatchToProps)(ShowPageView));\n","import React from 'react';\nimport { Grid } from 'semantic-ui-react';\n\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route\n} from 'react-router-dom';\n\nimport './app.scss';\nimport AppMenu from '../app-menu/app-menu';\nimport { NewsPage, NewestPage, JobsPage, AskPage, ShowPage } from '../../pages';\n\nexport interface AppProps {\n}\n\nconst App: React.FC<AppProps> = () => {\n    return (\n        <Router>\n            <Grid rows={1} columns={2} padded={true}>\n                <Grid.Row>\n                  <Grid.Column width={2}>\n                      <AppMenu/>\n                  </Grid.Column>\n                  <Grid.Column width={14}>\n                      <Switch>\n                          <Route path={['/', '/news']} exact>\n                              <NewsPage />\n                          </Route>\n                          <Route path={'/newest'} exact>\n                              <NewestPage />\n                          </Route>\n                          <Route path={'/jobs'} exact>\n                              <JobsPage />\n                          </Route>\n                          <Route path={'/ask'} exact>\n                              <AskPage />\n                          </Route>\n                          <Route path={'/show'} exact>\n                              <ShowPage />\n                          </Route>\n                      </Switch>\n                  </Grid.Column>\n                </Grid.Row>\n            </Grid>\n        </Router>\n    );\n};\n\nexport const AppContainer = App;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport ReduxThunk from 'redux-thunk';\n\nimport { news, newest, ask, jobs, show } from '../news/news.reducer';\n\nconst reducers = combineReducers({\n    news,\n    newest,\n    ask,\n    jobs,\n    show\n});\n\nexport const appStore = createStore(reducers, applyMiddleware(ReduxThunk));\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nimport { AppContainer } from './features/app/app';\nimport { appStore } from './features/app/app.store';\n\nReactDOM.render(\n    <Provider store={appStore}>\n        <AppContainer />\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}